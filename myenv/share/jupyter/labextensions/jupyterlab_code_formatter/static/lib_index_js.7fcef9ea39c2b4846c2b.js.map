{"version":3,"file":"lib_index_js.7fcef9ea39c2b4846c2b.js","mappings":"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","sources":["webpack://jupyterlab_code_formatter/./src/client.ts","webpack://jupyterlab_code_formatter/./src/constants.ts","webpack://jupyterlab_code_formatter/./src/formatter.ts","webpack://jupyterlab_code_formatter/./src/index.ts"],"sourcesContent":["import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\nimport { Constants } from './constants';\n\nclass JupyterlabCodeFormatterClient {\n  public request(path: string, method: string, body: any): Promise<any> {\n    const settings = ServerConnection.makeSettings();\n    const fullUrl = URLExt.join(settings.baseUrl, Constants.PLUGIN_NAME, path);\n    return ServerConnection.makeRequest(\n      fullUrl,\n      {\n        body,\n        method\n      },\n      settings\n    ).then(response => {\n      if (response.status !== 200) {\n        return response.text().then(() => {\n          throw new ServerConnection.ResponseError(\n            response,\n            response.statusText\n          );\n        });\n      }\n      return response.text();\n    });\n  }\n\n  public getAvailableFormatters(cache: boolean) {\n    return this.request('formatters' + (cache ? '?cached' : ''), 'GET', null);\n  }\n}\n\nexport default JupyterlabCodeFormatterClient;\n","export namespace Constants {\n  export const PLUGIN_NAME = 'jupyterlab_code_formatter';\n  export const FORMAT_COMMAND = `${PLUGIN_NAME}:format`;\n  export const FORMAT_ALL_COMMAND = `${PLUGIN_NAME}:format_all`;\n  // TODO: Extract this to style and import svg as string\n  export const ICON_FORMAT_ALL_SVG =\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" focusable=\"false\" width=\"1em\" height=\"1em\" style=\"-ms-transform: rotate(360deg); -webkit-transform: rotate(360deg); transform: rotate(360deg);\" preserveAspectRatio=\"xMidYMid meet\" viewBox=\"0 0 1792 1792\"><path class=\"jp-icon3\" d=\"M1473 929q7-118-33-226.5t-113-189t-177-131T929 325q-116-7-225.5 32t-192 110.5t-135 175T317 863q-7 118 33 226.5t113 189t177.5 131T862 1467q155 9 293-59t224-195.5t94-283.5zM1792 0l-349 348q120 117 180.5 272t50.5 321q-11 183-102 339t-241 255.5T999 1660L0 1792l347-347q-120-116-180.5-271.5T116 852q11-184 102-340t241.5-255.5T792 132q167-22 500-66t500-66z\" fill=\"#626262\"/></svg>';\n  export const ICON_FORMAT_ALL = 'fa fa-superpowers';\n  export const SETTINGS_SECTION = `${PLUGIN_NAME}:settings`;\n  export const COMMAND_SECTION_NAME = 'Jupyterlab Code Formatter';\n  // TODO: Use package.json info\n  export const PLUGIN_VERSION = '1.6.1';\n}\n","import { Cell, CodeCell } from '@jupyterlab/cells';\nimport { INotebookTracker, Notebook } from '@jupyterlab/notebook';\nimport JupyterlabCodeFormatterClient from './client';\nimport { IEditorTracker } from '@jupyterlab/fileeditor';\nimport { Widget } from '@lumino/widgets';\nimport { showErrorMessage } from '@jupyterlab/apputils';\n\nclass JupyterlabCodeFormatter {\n  working = false;\n  protected client: JupyterlabCodeFormatterClient;\n  constructor(client: JupyterlabCodeFormatterClient) {\n    this.client = client;\n  }\n\n  protected formatCode(\n    code: string[],\n    formatter: string,\n    options: any,\n    notebook: boolean,\n    cache: boolean\n  ) {\n    return this.client\n      .request(\n        'format' + (cache ? '?cached' : ''),\n        'POST',\n        JSON.stringify({\n          code,\n          notebook,\n          formatter,\n          options\n        })\n      )\n      .then(resp => JSON.parse(resp));\n  }\n}\n\nexport class JupyterlabNotebookCodeFormatter extends JupyterlabCodeFormatter {\n  protected notebookTracker: INotebookTracker;\n\n  constructor(\n    client: JupyterlabCodeFormatterClient,\n    notebookTracker: INotebookTracker\n  ) {\n    super(client);\n    this.notebookTracker = notebookTracker;\n  }\n\n  public async formatAction(config: any, formatter?: string) {\n    return this.formatCells(true, config, formatter);\n  }\n\n  public async formatSelectedCodeCells(\n    config: any,\n    formatter?: string,\n    notebook?: Notebook\n  ) {\n    return this.formatCells(true, config, formatter, notebook);\n  }\n\n  public async formatAllCodeCells(\n    config: any,\n    formatter?: string,\n    notebook?: Notebook\n  ) {\n    return this.formatCells(false, config, formatter, notebook);\n  }\n\n  private getCodeCells(selectedOnly = true, notebook?: Notebook): CodeCell[] {\n    if (!this.notebookTracker.currentWidget) {\n      return [];\n    }\n    const codeCells: CodeCell[] = [];\n    notebook = notebook || this.notebookTracker.currentWidget.content;\n    notebook.widgets.forEach((cell: Cell) => {\n      if (cell.model.type === 'code') {\n        if (!selectedOnly || (<Notebook>notebook).isSelectedOrActive(cell)) {\n          codeCells.push(cell as CodeCell);\n        }\n      }\n    });\n    return codeCells;\n  }\n\n  private getNotebookType() {\n    if (!this.notebookTracker.currentWidget) {\n      return null;\n    }\n\n    const metadata =\n      this.notebookTracker.currentWidget.content.model!.metadata.toJSON();\n\n    if (!metadata) {\n      return null;\n    }\n\n    // prefer kernelspec language\n    // @ts-ignore\n    if (metadata.kernelspec && metadata.kernelspec.language) {\n      // @ts-ignore\n      return metadata.kernelspec.language.toLowerCase();\n    }\n\n    // otherwise, check language info code mirror mode\n    // @ts-ignore\n    if (metadata.language_info && metadata.language_info.codemirror_mode) {\n      // @ts-ignore\n      return metadata.language_info.codemirror_mode.name.toLowerCase();\n    }\n\n    return null;\n  }\n\n  private getDefaultFormatters(config: any): Array<string> {\n    const notebookType = this.getNotebookType();\n    if (notebookType) {\n      const defaultFormatter =\n        config.preferences.default_formatter[notebookType];\n      if (defaultFormatter instanceof Array) {\n        return defaultFormatter;\n      } else if (defaultFormatter !== undefined) {\n        return [defaultFormatter];\n      }\n    }\n    return [];\n  }\n\n  private async getFormattersToUse(config: any, formatter?: string) {\n    const defaultFormatters = this.getDefaultFormatters(config);\n    const formattersToUse =\n      formatter !== undefined ? [formatter] : defaultFormatters;\n\n    if (formattersToUse.length === 0) {\n      await showErrorMessage(\n        'Jupyterlab Code Formatter Error',\n        'Unable to find default formatters to use, please file an issue on GitHub.'\n      );\n    }\n\n    return formattersToUse;\n  }\n\n  private async applyFormatters(\n    selectedCells: CodeCell[],\n    formattersToUse: string[],\n    config: any\n  ) {\n    for (const formatterToUse of formattersToUse) {\n      if (formatterToUse === 'noop' || formatterToUse === 'skip') {\n        continue;\n      }\n      const currentTexts = selectedCells.map(cell => cell.model.value.text);\n      const formattedTexts = await this.formatCode(\n        currentTexts,\n        formatterToUse,\n        config[formatterToUse],\n        true,\n        config.cacheFormatters\n      );\n\n      const showErrors = !(config.suppressFormatterErrors ?? false);\n      for (let i = 0; i < selectedCells.length; ++i) {\n        const cell = selectedCells[i];\n        const currentText = currentTexts[i];\n        const formattedText = formattedTexts.code[i];\n        const cellValueHasNotChanged = cell.model.value.text === currentText;\n        if (cellValueHasNotChanged) {\n          if (formattedText.error) {\n            if (showErrors) {\n              await showErrorMessage(\n                'Jupyterlab Code Formatter Error',\n                formattedText.error\n              );\n            }\n          } else {\n            cell.model.value.text = formattedText.code;\n          }\n        } else {\n          if (showErrors) {\n            await showErrorMessage(\n              'Jupyterlab Code Formatter Error',\n              `Cell value changed since format request was sent, formatting for cell ${i} skipped.`\n            );\n          }\n        }\n      }\n    }\n  }\n\n  private async formatCells(\n    selectedOnly: boolean,\n    config: any,\n    formatter?: string,\n    notebook?: Notebook\n  ) {\n    if (this.working) {\n      return;\n    }\n    try {\n      this.working = true;\n      const selectedCells = this.getCodeCells(selectedOnly, notebook);\n      if (selectedCells.length === 0) {\n        this.working = false;\n        return;\n      }\n\n      const formattersToUse = await this.getFormattersToUse(config, formatter);\n      await this.applyFormatters(selectedCells, formattersToUse, config);\n    } catch (error) {\n      await showErrorMessage('Jupyterlab Code Formatter Error', error);\n    }\n    this.working = false;\n  }\n\n  applicable(formatter: string, currentWidget: Widget) {\n    const currentNotebookWidget = this.notebookTracker.currentWidget;\n    // TODO: Handle showing just the correct formatter for the language later\n    return currentNotebookWidget && currentWidget === currentNotebookWidget;\n  }\n}\n\nexport class JupyterlabFileEditorCodeFormatter extends JupyterlabCodeFormatter {\n  protected editorTracker: IEditorTracker;\n\n  constructor(\n    client: JupyterlabCodeFormatterClient,\n    editorTracker: IEditorTracker\n  ) {\n    super(client);\n    this.editorTracker = editorTracker;\n  }\n\n  formatAction(config: any, formatter: string) {\n    if (this.working) {\n      return;\n    }\n    const editorWidget = this.editorTracker.currentWidget;\n    this.working = true;\n    const editor = editorWidget!.content.editor;\n    const code = editor.model.value.text;\n    this.formatCode(\n      [code],\n      formatter,\n      config[formatter],\n      false,\n      config.cacheFormatters\n    )\n      .then(data => {\n        if (data.code[0].error) {\n          void showErrorMessage(\n            'Jupyterlab Code Formatter Error',\n            data.code[0].error\n          );\n          this.working = false;\n          return;\n        }\n        this.editorTracker.currentWidget!.content.editor.model.value.text =\n          data.code[0].code;\n        this.working = false;\n      })\n      .catch(error => {\n        this.working = false;\n        void showErrorMessage('Jupyterlab Code Formatter Error', error);\n      });\n  }\n\n  applicable(formatter: string, currentWidget: Widget) {\n    const currentEditorWidget = this.editorTracker.currentWidget;\n    // TODO: Handle showing just the correct formatter for the language later\n    return currentEditorWidget && currentWidget === currentEditorWidget;\n  }\n}\n","import { DocumentRegistry } from '@jupyterlab/docregistry';\nimport {\n  INotebookModel,\n  INotebookTracker,\n  NotebookPanel\n} from '@jupyterlab/notebook';\nimport {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin\n} from '@jupyterlab/application';\nimport { ICommandPalette, ToolbarButton } from '@jupyterlab/apputils';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { IEditorTracker } from '@jupyterlab/fileeditor';\nimport JupyterlabCodeFormatterClient from './client';\nimport {\n  JupyterlabFileEditorCodeFormatter,\n  JupyterlabNotebookCodeFormatter\n} from './formatter';\nimport { DisposableDelegate, IDisposable } from '@lumino/disposable';\nimport { Constants } from './constants';\nimport { LabIcon } from '@jupyterlab/ui-components';\nimport { Widget } from '@lumino/widgets';\n\nclass JupyterLabCodeFormatter\n  implements DocumentRegistry.IWidgetExtension<NotebookPanel, INotebookModel>\n{\n  private app: JupyterFrontEnd;\n  private readonly tracker: INotebookTracker;\n  private palette: ICommandPalette;\n  private settingRegistry: ISettingRegistry;\n  private menu: IMainMenu;\n  private config: any;\n  private readonly editorTracker: IEditorTracker;\n  private readonly client: JupyterlabCodeFormatterClient;\n  private readonly notebookCodeFormatter: JupyterlabNotebookCodeFormatter;\n  private readonly fileEditorCodeFormatter: JupyterlabFileEditorCodeFormatter;\n\n  constructor(\n    app: JupyterFrontEnd,\n    tracker: INotebookTracker,\n    palette: ICommandPalette,\n    settingRegistry: ISettingRegistry,\n    menu: IMainMenu,\n    editorTracker: IEditorTracker\n  ) {\n    this.app = app;\n    this.tracker = tracker;\n    this.editorTracker = editorTracker;\n    this.palette = palette;\n    this.settingRegistry = settingRegistry;\n    this.menu = menu;\n    this.client = new JupyterlabCodeFormatterClient();\n    this.notebookCodeFormatter = new JupyterlabNotebookCodeFormatter(\n      this.client,\n      this.tracker\n    );\n    this.fileEditorCodeFormatter = new JupyterlabFileEditorCodeFormatter(\n      this.client,\n      this.editorTracker\n    );\n\n    this.setupSettings().then(() => {\n      this.setupAllCommands();\n      this.setupContextMenu();\n      this.setupWidgetExtension();\n    });\n    console.log('222wat');\n  }\n\n  public createNew(\n    nb: NotebookPanel,\n    context: DocumentRegistry.IContext<INotebookModel>\n  ): IDisposable {\n    const button = new ToolbarButton({\n      tooltip: 'Format notebook',\n      icon: new LabIcon({\n        name: Constants.FORMAT_ALL_COMMAND,\n        svgstr: Constants.ICON_FORMAT_ALL_SVG\n      }),\n      onClick: async () => {\n        await this.notebookCodeFormatter.formatAllCodeCells(\n          this.config,\n          undefined,\n          nb.content\n        );\n      }\n    });\n    nb.toolbar.insertAfter(\n      'cellType',\n      this.app.commands.label(Constants.FORMAT_ALL_COMMAND),\n      button\n    );\n\n    context.saveState.connect(this.onSave, this);\n\n    return new DisposableDelegate(() => {\n      button.dispose();\n    });\n  }\n\n  private async onSave(\n    context: DocumentRegistry.IContext<INotebookModel>,\n    state: DocumentRegistry.SaveState\n  ) {\n    if (state === 'started' && this.config.formatOnSave) {\n      await this.notebookCodeFormatter.formatAllCodeCells(this.config);\n    }\n  }\n\n  private setupWidgetExtension() {\n    this.app.docRegistry.addWidgetExtension('Notebook', this);\n  }\n\n  private setupContextMenu() {\n    this.app.contextMenu.addItem({\n      command: Constants.FORMAT_COMMAND,\n      selector: '.jp-Notebook'\n    });\n  }\n\n  private setupAllCommands() {\n    this.client\n      .getAvailableFormatters(this.config.cacheFormatters)\n      .then(data => {\n        const formatters = JSON.parse(data).formatters;\n        const menuGroup: Array<{ command: string }> = [];\n        Object.keys(formatters).forEach(formatter => {\n          if (formatters[formatter].enabled) {\n            const command = `${Constants.PLUGIN_NAME}:${formatter}`;\n            this.setupCommand(formatter, formatters[formatter].label, command);\n            menuGroup.push({ command });\n          }\n        });\n        this.menu.editMenu.addGroup(menuGroup);\n      });\n\n    this.app.commands.addCommand(Constants.FORMAT_COMMAND, {\n      execute: async () => {\n        await this.notebookCodeFormatter.formatSelectedCodeCells(this.config);\n      },\n      // TODO: Add back isVisible\n      label: 'Format cell'\n    });\n    this.app.commands.addCommand(Constants.FORMAT_ALL_COMMAND, {\n      execute: async () => {\n        await this.notebookCodeFormatter.formatAllCodeCells(this.config);\n      },\n      iconClass: Constants.ICON_FORMAT_ALL,\n      iconLabel: 'Format notebook'\n      // TODO: Add back isVisible\n    });\n  }\n\n  private async setupSettings() {\n    const settings = await this.settingRegistry.load(\n      Constants.SETTINGS_SECTION\n    );\n    const onSettingsUpdated = (jsettings: ISettingRegistry.ISettings) => {\n      this.config = jsettings.composite;\n    };\n    settings.changed.connect(onSettingsUpdated);\n    onSettingsUpdated(settings);\n  }\n\n  private setupCommand(name: string, label: string, command: string) {\n    this.app.commands.addCommand(command, {\n      execute: async () => {\n        for (const formatter of [\n          this.notebookCodeFormatter,\n          this.fileEditorCodeFormatter\n        ]) {\n          if (\n            formatter.applicable(name, <Widget>this.app.shell.currentWidget)\n          ) {\n            await formatter.formatAction(this.config, name);\n          }\n        }\n      },\n      isVisible: () => {\n        for (const formatter of [\n          this.notebookCodeFormatter,\n          this.fileEditorCodeFormatter\n        ]) {\n          if (\n            formatter.applicable(name, <Widget>this.app.shell.currentWidget)\n          ) {\n            return true;\n          }\n        }\n        return false;\n      },\n      label\n    });\n    this.palette.addItem({ command, category: Constants.COMMAND_SECTION_NAME });\n  }\n}\n\n/**\n * Initialization data for the jupyterlab_code_formatter extension.\n */\nconst plugin: JupyterFrontEndPlugin<void> = {\n  id: Constants.PLUGIN_NAME,\n  autoStart: true,\n  requires: [\n    ICommandPalette,\n    INotebookTracker,\n    ISettingRegistry,\n    IMainMenu,\n    IEditorTracker\n  ],\n  activate: (\n    app: JupyterFrontEnd,\n    palette: ICommandPalette,\n    tracker: INotebookTracker,\n    settingRegistry: ISettingRegistry,\n    menu: IMainMenu,\n    editorTracker: IEditorTracker\n  ) => {\n    new JupyterLabCodeFormatter(\n      app,\n      tracker,\n      palette,\n      settingRegistry,\n      menu,\n      editorTracker\n    );\n    console.log('JupyterLab extension jupyterlab_code_formatter is activated!');\n  }\n};\n\nexport default plugin;\n"],"names":[],"sourceRoot":""}